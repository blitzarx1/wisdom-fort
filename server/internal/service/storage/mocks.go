// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockkeyValStore is a mock of keyValStore interface.
type MockkeyValStore struct {
	ctrl     *gomock.Controller
	recorder *MockkeyValStoreMockRecorder
}

// MockkeyValStoreMockRecorder is the mock recorder for MockkeyValStore.
type MockkeyValStoreMockRecorder struct {
	mock *MockkeyValStore
}

// NewMockkeyValStore creates a new mock instance.
func NewMockkeyValStore(ctrl *gomock.Controller) *MockkeyValStore {
	mock := &MockkeyValStore{ctrl: ctrl}
	mock.recorder = &MockkeyValStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeyValStore) EXPECT() *MockkeyValStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockkeyValStore) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockkeyValStoreMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockkeyValStore)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockkeyValStore) Get(key string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockkeyValStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockkeyValStore)(nil).Get), key)
}

// Increment mocks base method.
func (m *MockkeyValStore) Increment(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Increment", key)
}

// Increment indicates an expected call of Increment.
func (mr *MockkeyValStoreMockRecorder) Increment(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockkeyValStore)(nil).Increment), key)
}

// Set mocks base method.
func (m *MockkeyValStore) Set(key string, value uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockkeyValStoreMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockkeyValStore)(nil).Set), key, value)
}
